---
import Head from "@/components/meta/Head.astro";
import Header from "@/components/common/Header.astro";
import Footer from "@/components/common/Footer.astro";
import CookieConsent from "@/components/common/CookieConsent.tsx";
import texts from "@/utils/texts.json";

interface Props {
  title: string;
  page: "home" | "about" | "services" | "contact" | "faq" | "datenschutz"  | "impressum" | "Agb" | "404" | "landing"; 
  navAnchors?: { id: string; label: string }[];
}
const { title, page, navAnchors } = Astro.props;

const { description, keywords } = texts.seo[page] || { description: "", keywords: "" };
---

<!doctype html>
<html lang="de">
  <Head title={title} />
  <!-- Meta Description -->
  <meta name="description" content={description} />
    <!-- Keywords for SEO -->
  <meta name="keywords" content={keywords} />
  <link rel="stylesheet" href="/src/styles/main.css" />
  <!-- WCAG 2.2 Text Spacing Support -->
  <link rel="stylesheet" href="/src/styles/wcag-text-spacing.css" id="wcag-text-spacing" />  <!-- WCAG 2.2 Focus Not Obscured Support -->
  <link rel="stylesheet" href="/src/styles/wcag-focus-not-obscured.css" id="wcag-focus-not-obscured" />  <!-- WCAG 2.2 Content on Hover or Focus Support -->
  <link rel="stylesheet" href="/src/styles/wcag-content-hover-focus.css" id="wcag-content-hover-focus" />
  <!-- WCAG 2.2 Focus Visible Enhancement Support -->
  <link rel="stylesheet" href="/src/styles/wcag-focus-visible-enhancement.css" id="wcag-focus-visible-enhancement" />  <!-- Essential FontAwesome icons only -->  <link
    rel="preload"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    as="style"
    onload={`this.onload=null;this.rel='stylesheet'`}
  />
  <noscript>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
  </noscript>  <!-- Performance Optimized Lazy Loading System -->
  <script src="/src/utils/lazy-loader.js" type="module" is:inline></script>
  
  <!-- Intelligent Preloading System -->
  <script src="/src/utils/intelligent-preloader.js" type="module" is:inline></script>
    <!-- Accessibility Manager System -->
  <script src="/src/utils/accessibility-manager.js" type="module" is:inline></script>
  
  <!-- Landing Page Navigation System -->
  <script src="/src/utils/landing-page-navigator.ts" type="module" is:inline></script>
    <!-- WCAG Test Suite Loader - Only load when needed -->
  <script type="module" is:inline>
    // Expose WCAG test loader for development/testing
    window.loadWCAGTests = () => {
      if (window.lazyLoader) {
        window.lazyLoader.loadWCAGTestSuite();
      }
    };
    
    // Auto-load WCAG test suite only in development or when URL contains test parameter
    if (window.location.search.includes('wcag-test') || window.location.hostname === 'localhost') {
      setTimeout(() => {
        if (window.lazyLoader) {
          window.lazyLoader.loadWCAGTestSuite();
        }
      }, 3000); // Load after 3 seconds in development
    }
  </script><body class="bg-white">
    <Header navAnchors={navAnchors} />
    <main class="relative">
      <slot />
      <CookieConsent client:idle />
    </main>
    <Footer isLandingPage={page === "landing"} />
  </body>
</html>
<style is:global>
body {
  font-family: "Montserrat", sans-serif; /* Fuente predeterminada */
}
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateX(-40px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes zoomIn {
  from { opacity: 0; transform: scale(0.9); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes gridIn {
  from { opacity: 0; transform: scale(0.7); }
  to { opacity: 1; transform: scale(1); }
}

.animate-on-scroll {
  opacity: 0;
  transition: opacity 0.8s ease-out, transform 0.8s ease-out;
}

.animate-on-scroll.show {
  opacity: 1;
}

.fade-in.show { 
  animation: fadeIn 0.8s ease-out forwards;
}

.slide-in.show {
  animation: slideIn 0.8s ease-out forwards;
}

.zoom-in.show {
  animation: zoomIn 0.8s ease-out forwards;
}

.grid-in.show {
  animation: gridIn 0.8s ease-out forwards;
}

.parallax {
  overflow: hidden;
  position: relative;
}

.parallax.show .parallax-bg {
  animation: fadeIn 0.8s ease-out forwards;
}

@media (prefers-reduced-motion: reduce) {
  .animate-on-scroll,
  .fade-in.show,
  .slide-in.show,
  .zoom-in.show,
  .grid-in.show,
  .parallax.show .parallax-bg {
    transition: none;
    animation: none;
    opacity: 1;
    transform: none;
  }
}
.parallax.show::before {
  animation: parallaxEffect 0.6s forwards;
}
.parallax-container {
  clip: rect(0, auto, auto, 0);
}

.parallax-image,
.parallax-video {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  will-change: transform;
  object-fit: cover;
  opacity: 0.7;
}

@media (prefers-reduced-motion: reduce) {
  .parallax-image,
  .parallax-video {
    position: absolute;
  }
}
@supports (-webkit-touch-callout: none) {
    .parallax-image,
    .parallax-video {
      position: absolute;
      height: 100vh;
      height: -webkit-fill-available;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .parallax-image,
    .parallax-video {
      position: absolute;
    }
  }
</style>
<script>
  // Store all observers for cleanup
  const observers = new Map();
  
  // Performance optimized intersection observer with throttling
  const createOptimizedObserver = () => {
    // Throttle observer callbacks to reduce main thread work
    const throttle = (func: Function, limit: number) => {
      let inThrottle: boolean;
      return function(this: any) {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      }
    };

    const optimizedCallback = throttle((entries: IntersectionObserverEntry[]) => {
      // Use requestAnimationFrame for smooth animations
      requestAnimationFrame(() => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('show');
            // Unobserve to prevent memory leaks and reduce work
            observers.get(entry.target)?.unobserve(entry.target);
            observers.delete(entry.target);
          }
        });
      });
    }, 50); // Throttle to 20fps max

    return new IntersectionObserver(optimizedCallback, { 
      threshold: 0.1,
      rootMargin: '50px' // Load animations 50px before they're visible
    });
  };

  // Initialize observer when DOM is ready
  const initAnimations = () => {
    const observer = createOptimizedObserver();
    const elements = document.querySelectorAll('.animate-on-scroll');
    
    elements.forEach((el) => {
      observer.observe(el);
      observers.set(el, observer);
    });
  };

  // Use efficient DOM ready detection
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnimations, { once: true });
  } else {
    initAnimations();
  }
</script>