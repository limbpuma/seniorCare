---
import Head from "@/components/meta/Head.astro";
import Header from "@/components/common/Header.astro";
import Footer from "@/components/common/Footer.astro";
import CookieConsent from "@/components/common/CookieConsent.tsx";
import texts from "@/utils/texts.json";

interface Props {
  title: string;
}
interface Props {
  title: string;
  page: "home" | "about" | "services" | "contact" | "faq" | "datenschutz"  | "impressum" | "Agb" | "404"; 
}
const { title, page } = Astro.props;

const { description, keywords } = texts.seo[page] || { description: "", keywords: "" };
---

<!doctype html>
<html lang="de">
  <Head title={title} />
  <!-- Meta Description -->
  <meta name="description" content={description} />
    <!-- Keywords for SEO -->
  <meta name="keywords" content={keywords} />
  <link rel="stylesheet" href="/src/styles/main.css" />
  <!-- WCAG 2.2 Text Spacing Support -->
  <link rel="stylesheet" href="/src/styles/wcag-text-spacing.css" id="wcag-text-spacing" />
  <!-- WCAG 2.2 Focus Not Obscured Support -->
  <link rel="stylesheet" href="/src/styles/wcag-focus-not-obscured.css" id="wcag-focus-not-obscured" />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
  />  <script src="https://cdn.jsdelivr.net/npm/flowbite@2.5.1/dist/flowbite.min.js"
  ></script>
  <!-- WCAG 2.2 Text Spacing Testing (development/testing only) -->
  <script src="/src/utils/wcag-text-spacing-test.js" type="module"></script>
  <!-- WCAG 2.2 Focus Not Obscured Testing (development/testing only) -->
  <script src="/src/utils/wcag-focus-not-obscured.js" type="module"></script>
  <body class="bg-white">
    <Header />
    <main class="relative">
      <slot />
      <CookieConsent client:load />
    </main>
    <Footer />
  </body>
</html>
<style is:global>
body {
  font-family: "Montserrat", sans-serif; /* Fuente predeterminada */
}
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateX(-40px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes zoomIn {
  from { opacity: 0; transform: scale(0.9); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes gridIn {
  from { opacity: 0; transform: scale(0.7); }
  to { opacity: 1; transform: scale(1); }
}

.animate-on-scroll {
  opacity: 0;
  transition: opacity 0.8s ease-out, transform 0.8s ease-out;
}

.animate-on-scroll.show {
  opacity: 1;
}

.fade-in.show { 
  animation: fadeIn 0.8s ease-out forwards;
}

.slide-in.show {
  animation: slideIn 0.8s ease-out forwards;
}

.zoom-in.show {
  animation: zoomIn 0.8s ease-out forwards;
}

.grid-in.show {
  animation: gridIn 0.8s ease-out forwards;
}

.parallax {
  overflow: hidden;
  position: relative;
}

.parallax.show .parallax-bg {
  animation: fadeIn 0.8s ease-out forwards;
}

@media (prefers-reduced-motion: reduce) {
  .animate-on-scroll,
  .fade-in.show,
  .slide-in.show,
  .zoom-in.show,
  .grid-in.show,
  .parallax.show .parallax-bg {
    transition: none;
    animation: none;
    opacity: 1;
    transform: none;
  }
}
.parallax.show::before {
  animation: parallaxEffect 0.6s forwards;
}
.parallax-container {
  clip: rect(0, auto, auto, 0);
}

.parallax-image,
.parallax-video {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  will-change: transform;
  object-fit: cover;
  opacity: 0.7;
}

@media (prefers-reduced-motion: reduce) {
  .parallax-image,
  .parallax-video {
    position: absolute;
  }
}
@supports (-webkit-touch-callout: none) {
    .parallax-image,
    .parallax-video {
      position: absolute;
      height: 100vh;
      height: -webkit-fill-available;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .parallax-image,
    .parallax-video {
      position: absolute;
    }
  }
</style>
<script>
 const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
        observer.unobserve(entry.target); // Dejar de observar una vez que se ha mostrado
      }
    });
  }, { threshold: 0.1 });

  document.querySelectorAll('.animate-on-scroll').forEach((el) => observer.observe(el));  
  </script>