---
import Button from "./Button.astro";

interface Props {
  subtitle?: string;
  title?: string;
  secondTitle?: string;
  thirdTitle?: string;
  description?: string;
  descriptionBold?: string;
  testimonial?: string;
  alignment?: 'left' | 'center' | 'right';
  textColor?: string;
  buttonText?: string;
  buttonVariant?: "primary" | "secondary" | "accent";
  buttonSize?: "small" | "medium" | "large";
  buttonHref?: string;
  // New props for proper heading hierarchy
  headingLevel?: 1 | 2 | 3 | 4 | 5 | 6;
  useSemanticHeadings?: boolean;
}

const {
  subtitle,
  title,
  secondTitle,
  thirdTitle,
  description,
  descriptionBold,
  testimonial,
  alignment = 'left',
  textColor = 'text-primary-700',
  buttonText,
  buttonVariant = "primary",
  buttonSize = "medium",
  buttonHref,
  headingLevel = 2,
  useSemanticHeadings = true
} = Astro.props;

const alignmentClasses = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right'
};

const alignmentClass = alignmentClasses[alignment];

// Generate appropriate heading tags based on semantic hierarchy
const getHeadingTag = (level: number) => {
  const validLevel = Math.min(Math.max(level, 1), 6);
  return `h${validLevel}`;
};

const subtitleTag = useSemanticHeadings ? getHeadingTag(headingLevel) : 'p';
const titleTag = useSemanticHeadings ? getHeadingTag(headingLevel + (subtitle ? 1 : 0)) : 'h2';
const secondTitleTag = useSemanticHeadings ? getHeadingTag(headingLevel + (subtitle ? 2 : 1)) : 'h3';
const thirdTitleTag = useSemanticHeadings ? getHeadingTag(headingLevel + (subtitle ? 3 : 2)) : 'h4';
---

<div class={`${alignmentClass} ${textColor} max-w-content mx-auto px-spacing-4 sm:px-spacing-6 lg:px-spacing-8`}>
  {subtitle && (
    <Fragment set:html={`<${subtitleTag} class="text-subtitle font-medium mb-spacing-2 sm:mb-spacing-3 md:mb-spacing-4${useSemanticHeadings ? ' text-neutral-600' : ''}">${subtitle}</${subtitleTag}>`} />
  )}
  {title && (
    <Fragment set:html={`<${titleTag} class="text-h4 sm:text-h3 md:text-h2 lg:text-[56px] xl:text-[60px] font-bold mb-spacing-4 sm:mb-spacing-6 md:mb-spacing-8 leading-tight">${title}</${titleTag}>`} />
  )}
  {secondTitle && (
    <Fragment set:html={`<${secondTitleTag} class="text-h5 sm:text-h4 md:text-h3 lg:text-[40px] xl:text-[44px] font-semibold mb-spacing-3 sm:mb-spacing-4 md:mb-spacing-6 leading-tight">${secondTitle}</${secondTitleTag}>`} />
  )}
  {thirdTitle && (
    <Fragment set:html={`<${thirdTitleTag} class="text-body sm:text-h5 md:text-h4 lg:text-[32px] xl:text-[34px] font-medium mb-spacing-2 sm:mb-spacing-3 md:mb-spacing-4 leading-tight">${thirdTitle}</${thirdTitleTag}>`} />
  )}
  {description && (
    <p class="text-body font-normal mb-spacing-6 sm:mb-spacing-8 md:mb-spacing-10 max-w-prose mx-auto leading-relaxed">
      {description}
    </p>
  )}
  {descriptionBold && (
    <p class="font-semibold text-body mb-spacing-6 sm:mb-spacing-8 md:mb-spacing-10 max-w-prose mx-auto leading-relaxed">
      {descriptionBold}
    </p>
  )}
  {testimonial && (
    <blockquote class="text-body-lg font-normal italic mb-spacing-6 sm:mb-spacing-8 md:mb-spacing-10 max-w-testimonial mx-auto leading-relaxed border-l-4 border-primary-200 pl-spacing-6 text-neutral-700">
      <p>"{testimonial}"</p>
    </blockquote>
  )}
  {buttonText && (
    <div class={`mt-spacing-6 sm:mt-spacing-8 md:mt-spacing-10 sm:mx-auto ${alignment === 'center' ? 'text-center' : ''}`}>
      <Button
        href={buttonHref}
        variant={buttonVariant}
        size={buttonSize}
      >
        {buttonText}
      </Button>
    </div>
  )}
</div>