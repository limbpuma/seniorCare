---
import Button from "./Button.astro";

type FormSize = "large" | "medium" | "small";

interface Props {
  class?: string;
  title: string;  inputFields: {
    type: string;
    placeholder: string;
    label?: string; // Make label optional, will be generated from placeholder if not provided
  }[];
  selectOptions: string[];
  textareaPlaceholder: string;
  buttonText: string;
  size?: FormSize;
  image?: string;
}

const {
  class: className,
  title,
  inputFields,
  selectOptions,
  textareaPlaceholder,
  buttonText,
  size = "large",
  image,
} = Astro.props;

const sizeClasses = {
  large: "max-w-lg w-full px-6 sm:px-8 md:px-10 py-10 sm:py-12 md:py-14",
  medium: "max-w-md w-full px-4 sm:px-6 md:px-8 py-8 sm:py-10 md:py-12",
  small: "max-w-sm w-full px-3 sm:px-4 md:px-6 py-6 sm:py-8 md:py-10",
};

const titleClasses = {
  large: "text-ag-h4 sm:text-ag-h3 md:text-ag-h2 mb-6 sm:mb-8 md:mb-10",
  medium: "text-ag-h5 sm:text-ag-h4 md:text-ag-h3 mb-4 sm:mb-6 md:mb-8",
  small: "text-ag-body-text sm:text-ag-h5 md:text-ag-h4 mb-3 sm:mb-4 md:mb-6",
};

const spacingClasses = {
  large: "space-y-6 sm:space-y-7 md:space-y-8",
  medium: "space-y-4 sm:space-y-5 md:space-y-6",
  small: "space-y-3 sm:space-y-4 md:space-y-5",
};

const buttonClasses = {
  large: "mt-8 sm:mt-10 md:mt-12",
  medium: "mt-6 sm:mt-8 md:mt-10",
  small: "mt-4 sm:mt-6 md:mt-8",
};

const inputClasses = "w-full px-4 py-2 bg-inherit border-t-0 border-x-0 border-b border-primary text-primary-dark focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-ag-body-text font-ag-body-text";

const getTextareaRows = () => {
  if (size === "small") return "3";
  if (size === "medium") return "4";
  return "6";
};

// Generate field IDs for proper label association
const generateFieldId = (index: number, type: string) => {
  return `contact-field-${index}-${type}`;
};
---

<div class="relative">
  <form
    id="contact-form"
    class={`bg-soft-orange mx-auto flex flex-col justify-between shadow-lg rounded-lg md:mb-8 ${sizeClasses[size]} ${className}`}
    novalidate
    role="form"
    aria-labelledby="form-title"
  >
    {size === "small" && image && (
      <div class="w-full h-32 sm:h-40 md:h-48 overflow-hidden mb-4 rounded-t-lg">
        <img
          src={image}
          alt="Kontaktformular Header-Bild"
          class="w-full h-full object-cover"
          loading="lazy"
        />
      </div>
    )}
    <h2
      id="form-title"
      class={`text-ag-body-text sm:text-ag-h5 md:text-ag-h4 lg:text-[32px] xl:text-[34px] font-ag-h4 mb-2 sm:mb-3 md:mb-4 leading-tight text-center text-deep-blue uppercase ${titleClasses[size]}`}
      set:html={title}
    />
    
    <div class={spacingClasses[size]}>      {inputFields.map((input, index) => {
        const { type, placeholder, label } = input;
        let name = type;
        if (type === "tel") name = "phone";
        if (type === "text" && placeholder.toLowerCase().includes("name"))
          name = "name";
        
        const fieldId = generateFieldId(index, type);
        const isRequired = true;
        const fieldLabel = label || placeholder; // Use label if provided, otherwise use placeholder
        
        return (
          <div class="form-field">
            <label 
              for={fieldId} 
              class="block text-ag-body-text font-ag-body-text mb-1 text-deep-blue"
            >
              {fieldLabel}
              {isRequired && <span class="text-red-500 ml-1" aria-label="erforderlich">*</span>}
            </label>
            <input
              id={fieldId}
              type={type as astroHTML.JSX.HTMLInputTypeAttribute}
              name={name}
              placeholder={placeholder}
              class={inputClasses}
              required={isRequired}
              aria-required={isRequired ? "true" : "false"}
              aria-describedby={`${fieldId}-error`}
            />
            <div id={`${fieldId}-error`} class="error-message text-red-500 text-sm mt-1 hidden" role="alert"></div>
          </div>
        );
      })}
      
      <div class="form-field">
        <label for="contact-subject" class="block text-ag-body-text font-ag-body-text mb-1 text-deep-blue">
          Betreff <span class="text-red-500 ml-1" aria-label="erforderlich">*</span>
        </label>
        <select 
          id="contact-subject"
          name="subject" 
          class={inputClasses} 
          required
          aria-required="true"
          aria-describedby="contact-subject-error"
        >
          <option value="" disabled selected>Bitte wählen Sie einen Betreff</option>
          {selectOptions.map((option) => <option value={option}>{option}</option>)}
        </select>
        <div id="contact-subject-error" class="error-message text-red-500 text-sm mt-1 hidden" role="alert"></div>
      </div>
      
      <div class="form-field">
        <label for="contact-message" class="block text-ag-body-text font-ag-body-text mb-1 text-deep-blue">
          Nachricht <span class="text-red-500 ml-1" aria-label="erforderlich">*</span>
        </label>
        <textarea
          id="contact-message"
          name="message"
          placeholder={textareaPlaceholder}
          rows={getTextareaRows()}
          class={inputClasses}
          required
          aria-required="true"
          aria-describedby="contact-message-error"
        ></textarea>
        <div id="contact-message-error" class="error-message text-red-500 text-sm mt-1 hidden" role="alert"></div>
      </div>
    </div>
    
    <Button
      type="submit"
      variant="primary"
      fullWidth
      class={buttonClasses[size]}
      aria-describedby="form-status"
    >
      {buttonText}
    </Button>
    
    <div class="flex items-start mt-4">
      <input
        type="checkbox"
        id="consent"
        name="consent"
        class="mt-1 mr-2 focus:ring-2 focus:ring-blue-500"
        required
        aria-required="true"
        aria-describedby="consent-error"
      />
      <label for="consent" class="text-ag-body-text font-ag-body-text text-deep-blue">
        <span class="text-red-500 mr-1" aria-label="erforderlich">*</span>
        Ich stimme der Verwendung meiner Daten zu. Mehr Infos in der 
        <a href="/datenschutz" class="text-primary underline focus:outline-none focus:ring-2 focus:ring-blue-500 rounded">
          Datenschutzerklärung
        </a>.
      </label>
    </div>
    <div id="consent-error" class="error-message text-red-500 text-sm mt-1 hidden" role="alert"></div>
    
    <div id="form-status" class="sr-only" aria-live="polite" aria-atomic="true"></div>
  </form>
  
  <!-- Accessible Modal -->
  <div
    id="message-modal"
    class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
    role="dialog"
    aria-modal="true"
    aria-labelledby="modal-title"
    aria-describedby="modal-message"
  >
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
      <h3 id="modal-title" class="text-ag-h5 sm:text-ag-h4 md:text-ag-h3 font-ag-h3 mb-4"></h3>
      <p id="modal-message" class="text-ag-body-text font-ag-body-text mb-6"></p>
      <button
        id="close-modal"
        class="w-full px-4 py-2 bg-deep-blue hover:bg-soft-blue text-white rounded-full transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 font-ag-button-text text-ag-button-text"
        aria-label="Modal schließen"
      >
        Schließen
      </button>
    </div>
  </div>
</div>

<style>
  .form-field {
    position: relative;
  }
  
  .error-message.show {
    display: block;
  }
  
  /* Enhanced focus styles */
  input:focus,
  textarea:focus,
  select:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  /* Error state styles */
  .field-error {
    border-color: #ef4444 !important;
  }
  
  .field-error:focus {
    outline-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
</style>

<script>
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const messageModal = document.getElementById("message-modal") as HTMLDivElement;
  const modalTitle = document.getElementById("modal-title") as HTMLHeadingElement;
  const modalMessage = document.getElementById("modal-message") as HTMLParagraphElement;
  const closeModalButton = document.getElementById("close-modal") as HTMLButtonElement;
  const consentCheckbox = document.getElementById("consent") as HTMLInputElement;
  const formStatus = document.getElementById("form-status") as HTMLDivElement;

  function isValidGermanPhoneNumber(phone: string): boolean {
    const germanPhoneRegex = /^(\+49|0)[1-9]\d{1,14}$/;
    return germanPhoneRegex.test(phone.replace(/\s/g, ""));
  }

  function showFieldError(fieldId: string, message: string) {
    const field = document.getElementById(fieldId) as HTMLInputElement;
    const errorDiv = document.getElementById(`${fieldId}-error`) as HTMLDivElement;
    
    if (field && errorDiv) {
      field.classList.add('field-error');
      field.setAttribute('aria-invalid', 'true');
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
      errorDiv.classList.add('show');
    }
  }

  function clearFieldError(fieldId: string) {
    const field = document.getElementById(fieldId) as HTMLInputElement;
    const errorDiv = document.getElementById(`${fieldId}-error`) as HTMLDivElement;
    
    if (field && errorDiv) {
      field.classList.remove('field-error');
      field.setAttribute('aria-invalid', 'false');
      errorDiv.classList.remove('show');
      errorDiv.classList.add('hidden');
    }
  }
  function validateForm(): boolean {
    let isValid = true;
    
    // Clear previous errors
    const errorDivs = form.querySelectorAll('.error-message');
    errorDivs.forEach(div => {
      div.classList.add('hidden');
      div.classList.remove('show');
    });
    
    const fields = form.querySelectorAll('input, select, textarea');
    fields.forEach(field => {
      field.classList.remove('field-error');
      field.setAttribute('aria-invalid', 'false');
    });

    // Validate required fields
    const requiredFields = form.querySelectorAll('[required]');
    requiredFields.forEach(field => {
      const inputField = field as HTMLInputElement;
      if (!inputField.value.trim()) {
        showFieldError(inputField.id, 'Dieses Feld ist erforderlich.');
        isValid = false;
      }
    });

    // Validate phone number
    const phoneField = form.querySelector('[name="phone"]') as HTMLInputElement;
    if (phoneField && phoneField.value) {
      if (!isValidGermanPhoneNumber(phoneField.value)) {
        showFieldError(phoneField.id, 'Bitte geben Sie eine gültige deutsche Telefonnummer ein.');
        isValid = false;
      }
    }

    // Validate consent
    if (!consentCheckbox.checked) {
      const consentError = document.getElementById('consent-error') as HTMLDivElement;
      if (consentError) {
        consentError.textContent = 'Bitte bestätigen Sie die Datenschutzerklärung.';
        consentError.classList.remove('hidden');
        consentError.classList.add('show');
      }
      isValid = false;
    }

    return isValid;
  }

  // Real-time validation
  const inputs = form.querySelectorAll('input, select, textarea');
  inputs.forEach(input => {
    input.addEventListener('blur', () => {
      const inputField = input as HTMLInputElement;
      if (inputField.hasAttribute('required') && !inputField.value.trim()) {
        showFieldError(inputField.id, 'Dieses Feld ist erforderlich.');
      } else {
        clearFieldError(inputField.id);
      }
    });
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      formStatus.textContent = "Bitte korrigieren Sie die Fehler im Formular.";
      return;
    }

    formStatus.textContent = "Nachricht wird gesendet...";

    const formData = new FormData(form);

    try {
      const response = await fetch("https://mail.pflegedienst-integra.de/send-email.php", {
        method: "POST",
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        showModal(
          "Nachricht gesendet!",
          "Vielen Dank für Ihre Kontaktaufnahme. Wir werden uns bald bei Ihnen melden."
        );
        form.reset();
        formStatus.textContent = "Nachricht erfolgreich gesendet.";
      } else {
        showModal(
          "Fehler",
          "Beim Senden der Nachricht ist ein Fehler aufgetreten: " + result.error
        );
        formStatus.textContent = "Fehler beim Senden der Nachricht.";
      }
    } catch (error) {
      showModal(
        "Fehler",
        "Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut."
      );
      formStatus.textContent = "Unerwarteter Fehler aufgetreten.";
    }
  });

  function showModal(title: string, message: string) {
    modalTitle.textContent = title;
    modalMessage.textContent = message;
    messageModal.classList.remove("hidden");
    
    // Focus the modal for screen readers
    modalTitle.focus();
    
    // Trap focus within modal
    trapFocus(messageModal);
  }

  function trapFocus(element: HTMLElement) {
    const focusableElements = element.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

    element.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement.focus();
            e.preventDefault();
          }
        } else {
          if (document.activeElement === lastElement) {
            firstElement.focus();
            e.preventDefault();
          }
        }
      }
      
      if (e.key === 'Escape') {
        closeModal();
      }
    });
  }

  function closeModal() {
    messageModal.classList.add("hidden");
    // Return focus to form submit button
    const submitButton = form.querySelector('[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.focus();
    }
  }

  closeModalButton.addEventListener("click", closeModal);

  messageModal.addEventListener("click", (e) => {
    if (e.target === messageModal) {
      closeModal();
    }
  });

  // Handle Escape key for modal
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !messageModal.classList.contains('hidden')) {
      closeModal();
    }
  });
</script>