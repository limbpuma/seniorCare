---
interface Props {
  type?: "text" | "email" | "tel" | "password" | "number" | "url" | "search";
  name: string;
  id?: string;
  label: string;
  placeholder?: string;
  value?: string | number;
  required?: boolean;
  disabled?: boolean;
  readonly?: boolean;
  autocomplete?: string;
  ariaDescribedBy?: string;
  error?: string;
  helpText?: string;
  class?: string;
  size?: "small" | "medium" | "large";
  variant?: "default" | "error" | "success";
}

const {
  type = "text",
  name,
  id = name,
  label,
  placeholder,
  value,
  required = false,
  disabled = false,
  readonly = false,
  autocomplete,
  ariaDescribedBy,
  error,
  helpText,
  class: className,
  size = "medium",
  variant = "default",
  ...props
} = Astro.props;

const sizeClasses = {
  small: "py-2 px-3 text-sm",
  medium: "py-3 px-4 text-base",
  large: "py-4 px-5 text-lg",
};

const variantClasses = {
  default: "border-gray-300 focus:border-blue-500 focus:ring-blue-500",
  error: "border-red-500 focus:border-red-500 focus:ring-red-500",
  success: "border-green-500 focus:border-green-500 focus:ring-green-500",
};

const baseClasses = "w-full rounded-md border shadow-sm transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed";

const inputClasses = [
  baseClasses,
  sizeClasses[size],
  variantClasses[variant],
  className,
].filter(Boolean);

const describedByIds = [
  error && `${id}-error`,
  helpText && `${id}-help`,
  ariaDescribedBy,
].filter(Boolean).join(" ");
---

<div class="space-y-1">
  <label 
    for={id}
    class="block text-sm font-medium text-gray-700"
  >
    {label}
    {required && <span class="text-red-500 ml-1" aria-label="Pflichtfeld">*</span>}
  </label>
  
  <input
    type={type}
    name={name}
    id={id}
    class:list={inputClasses}
    placeholder={placeholder}
    value={value}
    required={required}
    disabled={disabled}
    readonly={readonly}
    autocomplete={autocomplete}
    aria-describedby={describedByIds || undefined}
    aria-invalid={error ? "true" : "false"}
    aria-required={required ? "true" : "false"}
    {...props}
  />
  
  {helpText && (
    <p 
      id={`${id}-help`}
      class="text-sm text-gray-600"
    >
      {helpText}
    </p>
  )}
  
  {error && (
    <p 
      id={`${id}-error`}
      class="text-sm text-red-600"
      role="alert"
      aria-live="polite"
    >
      {error}
    </p>
  )}
</div>